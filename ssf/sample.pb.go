// Code generated by protoc-gen-go.
// source: sample.proto
// DO NOT EDIT!

/*
Package ssf is a generated protocol buffer package.

It is generated from these files:
	sample.proto

It has these top-level messages:
	SSFTag
	SSFTrace
	SSFSample
*/
package ssf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SSFSample_Metric int32

const (
	SSFSample_COUNTER   SSFSample_Metric = 0
	SSFSample_GAUGE     SSFSample_Metric = 1
	SSFSample_HISTOGRAM SSFSample_Metric = 2
	SSFSample_SET       SSFSample_Metric = 3
	SSFSample_STATUS    SSFSample_Metric = 4
	SSFSample_EVENT     SSFSample_Metric = 5
	SSFSample_TRACE     SSFSample_Metric = 6
)

var SSFSample_Metric_name = map[int32]string{
	0: "COUNTER",
	1: "GAUGE",
	2: "HISTOGRAM",
	3: "SET",
	4: "STATUS",
	5: "EVENT",
	6: "TRACE",
}
var SSFSample_Metric_value = map[string]int32{
	"COUNTER":   0,
	"GAUGE":     1,
	"HISTOGRAM": 2,
	"SET":       3,
	"STATUS":    4,
	"EVENT":     5,
	"TRACE":     6,
}

func (x SSFSample_Metric) String() string {
	return proto.EnumName(SSFSample_Metric_name, int32(x))
}
func (SSFSample_Metric) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type SSFSample_Status int32

const (
	SSFSample_OK       SSFSample_Status = 0
	SSFSample_WARNING  SSFSample_Status = 1
	SSFSample_CRITICAL SSFSample_Status = 2
	SSFSample_UNKNOWN  SSFSample_Status = 3
)

var SSFSample_Status_name = map[int32]string{
	0: "OK",
	1: "WARNING",
	2: "CRITICAL",
	3: "UNKNOWN",
}
var SSFSample_Status_value = map[string]int32{
	"OK":       0,
	"WARNING":  1,
	"CRITICAL": 2,
	"UNKNOWN":  3,
}

func (x SSFSample_Status) String() string {
	return proto.EnumName(SSFSample_Status_name, int32(x))
}
func (SSFSample_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

type SSFTag struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *SSFTag) Reset()                    { *m = SSFTag{} }
func (m *SSFTag) String() string            { return proto.CompactTextString(m) }
func (*SSFTag) ProtoMessage()               {}
func (*SSFTag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SSFTrace struct {
	TraceId  int64 `protobuf:"varint,1,opt,name=trace_id,json=traceId" json:"trace_id,omitempty"`
	Id       int64 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	ParentId int64 `protobuf:"varint,3,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
}

func (m *SSFTrace) Reset()                    { *m = SSFTrace{} }
func (m *SSFTrace) String() string            { return proto.CompactTextString(m) }
func (*SSFTrace) ProtoMessage()               {}
func (*SSFTrace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SSFSample struct {
	Metric     SSFSample_Metric `protobuf:"varint,1,opt,name=metric,enum=ssf.SSFSample_Metric" json:"metric,omitempty"`
	Name       string           `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Timestamp  int64            `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Message    string           `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	Status     SSFSample_Status `protobuf:"varint,5,opt,name=status,enum=ssf.SSFSample_Status" json:"status,omitempty"`
	Value      float64          `protobuf:"fixed64,6,opt,name=value" json:"value,omitempty"`
	SampleRate float32          `protobuf:"fixed32,7,opt,name=sample_rate,json=sampleRate" json:"sample_rate,omitempty"`
	Tags       *SSFTag          `protobuf:"bytes,8,opt,name=tags" json:"tags,omitempty"`
	Unit       string           `protobuf:"bytes,9,opt,name=unit" json:"unit,omitempty"`
	Trace      *SSFTrace        `protobuf:"bytes,10,opt,name=trace" json:"trace,omitempty"`
}

func (m *SSFSample) Reset()                    { *m = SSFSample{} }
func (m *SSFSample) String() string            { return proto.CompactTextString(m) }
func (*SSFSample) ProtoMessage()               {}
func (*SSFSample) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SSFSample) GetTags() *SSFTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *SSFSample) GetTrace() *SSFTrace {
	if m != nil {
		return m.Trace
	}
	return nil
}

func init() {
	proto.RegisterType((*SSFTag)(nil), "ssf.SSFTag")
	proto.RegisterType((*SSFTrace)(nil), "ssf.SSFTrace")
	proto.RegisterType((*SSFSample)(nil), "ssf.SSFSample")
	proto.RegisterEnum("ssf.SSFSample_Metric", SSFSample_Metric_name, SSFSample_Metric_value)
	proto.RegisterEnum("ssf.SSFSample_Status", SSFSample_Status_name, SSFSample_Status_value)
}

func init() { proto.RegisterFile("sample.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x52, 0xcf, 0x6b, 0xdb, 0x30,
	0x14, 0xae, 0xed, 0x58, 0xb6, 0x5f, 0xda, 0x22, 0x1e, 0x1b, 0x68, 0x6c, 0xb0, 0xe0, 0x5d, 0x72,
	0x59, 0x0e, 0xd9, 0x65, 0x57, 0x13, 0xdc, 0xcc, 0x74, 0x75, 0x40, 0x52, 0x56, 0xd8, 0xa5, 0x68,
	0xb5, 0x1a, 0x0c, 0x75, 0x1a, 0x2c, 0x65, 0x7f, 0xed, 0xfe, 0x98, 0x21, 0xd9, 0x4d, 0x76, 0xd8,
	0xed, 0xe9, 0xfb, 0xe1, 0xef, 0xbd, 0x0f, 0xc3, 0xa5, 0x51, 0xdd, 0xe1, 0x59, 0x2f, 0x0e, 0xfd,
	0x8b, 0x7d, 0xc1, 0xc8, 0x98, 0xa7, 0x7c, 0x09, 0x44, 0x88, 0x1b, 0xa9, 0x76, 0x88, 0x30, 0xd9,
	0xab, 0x4e, 0xb3, 0x60, 0x16, 0xcc, 0x33, 0xee, 0x67, 0x7c, 0x03, 0xf1, 0x6f, 0xf5, 0x7c, 0xd4,
	0x2c, 0xf4, 0xe0, 0xf0, 0xc8, 0x39, 0xa4, 0xce, 0xd3, 0xab, 0x47, 0x8d, 0xef, 0x20, 0xb5, 0x6e,
	0x78, 0x68, 0x1b, 0xef, 0x8c, 0x78, 0xe2, 0xdf, 0x55, 0x83, 0xd7, 0x10, 0xb6, 0x8d, 0x77, 0x46,
	0x3c, 0x6c, 0x1b, 0x7c, 0x0f, 0xd9, 0x41, 0xf5, 0x7a, 0x6f, 0x9d, 0x36, 0xf2, 0x70, 0x3a, 0x00,
	0x55, 0x93, 0xff, 0x89, 0x20, 0x13, 0xe2, 0x46, 0xf8, 0x05, 0xf1, 0x33, 0x90, 0x4e, 0xdb, 0xbe,
	0x7d, 0xf4, 0xdf, 0xbc, 0x5e, 0xbe, 0x5d, 0x18, 0xf3, 0xb4, 0x38, 0xf1, 0x8b, 0x3b, 0x4f, 0xf2,
	0x51, 0x74, 0x5a, 0x3d, 0xfc, 0x67, 0xf5, 0x0f, 0x90, 0xd9, 0xb6, 0xd3, 0xc6, 0xaa, 0xee, 0x30,
	0xa6, 0x9d, 0x01, 0x64, 0x90, 0x74, 0xda, 0x18, 0xb5, 0xd3, 0x6c, 0xe2, 0x4d, 0xaf, 0x4f, 0x17,
	0x6d, 0xac, 0xb2, 0x47, 0xc3, 0xe2, 0xff, 0x46, 0x0b, 0x4f, 0xf2, 0x51, 0x74, 0x6e, 0x88, 0xcc,
	0x82, 0x79, 0x30, 0x36, 0x84, 0x1f, 0x61, 0x3a, 0x54, 0xfd, 0xd0, 0x2b, 0xab, 0x59, 0x32, 0x0b,
	0xe6, 0x21, 0x87, 0x01, 0xe2, 0xca, 0x3a, 0xc1, 0xc4, 0xaa, 0x9d, 0x61, 0xe9, 0x2c, 0x98, 0x4f,
	0x97, 0xd3, 0xd7, 0x0c, 0xa9, 0x76, 0xdc, 0x13, 0xee, 0xa4, 0xe3, 0xbe, 0xb5, 0x2c, 0x1b, 0x4e,
	0x72, 0x33, 0x7e, 0x82, 0xd8, 0x77, 0xcb, 0xc0, 0xbb, 0xae, 0x4e, 0x2e, 0x07, 0xf2, 0x81, 0xcb,
	0x7f, 0x02, 0x19, 0xda, 0xc1, 0x29, 0x24, 0xab, 0xcd, 0xb6, 0x96, 0x25, 0xa7, 0x17, 0x98, 0x41,
	0xbc, 0x2e, 0xb6, 0xeb, 0x92, 0x06, 0x78, 0x05, 0xd9, 0xb7, 0x4a, 0xc8, 0xcd, 0x9a, 0x17, 0x77,
	0x34, 0xc4, 0x04, 0x22, 0x51, 0x4a, 0x1a, 0x21, 0x00, 0x11, 0xb2, 0x90, 0x5b, 0x41, 0x27, 0x4e,
	0x5e, 0xfe, 0x28, 0x6b, 0x49, 0x63, 0x37, 0x4a, 0x5e, 0xac, 0x4a, 0x4a, 0xf2, 0xaf, 0x40, 0x86,
	0xf3, 0x91, 0x40, 0xb8, 0xb9, 0xa5, 0x17, 0x2e, 0xe3, 0xbe, 0xe0, 0x75, 0x55, 0xaf, 0x69, 0x80,
	0x97, 0x90, 0xae, 0x78, 0x25, 0xab, 0x55, 0xf1, 0x9d, 0x86, 0x8e, 0xda, 0xd6, 0xb7, 0xf5, 0xe6,
	0xbe, 0xa6, 0xd1, 0x2f, 0xe2, 0x7f, 0xb9, 0x2f, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x32, 0xbc,
	0xe3, 0xfc, 0x82, 0x02, 0x00, 0x00,
}
