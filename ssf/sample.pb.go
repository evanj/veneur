// Code generated by protoc-gen-go.
// source: sample.proto
// DO NOT EDIT!

/*
Package ssf is a generated protocol buffer package.

It is generated from these files:
	sample.proto

It has these top-level messages:
	SSFTag
	SSFTrace
	SSFSample
*/
package ssf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SSFSample_Metric int32

const (
	SSFSample_COUNTER   SSFSample_Metric = 0
	SSFSample_GAUGE     SSFSample_Metric = 1
	SSFSample_HISTOGRAM SSFSample_Metric = 2
	SSFSample_SET       SSFSample_Metric = 3
	SSFSample_STATUS    SSFSample_Metric = 4
	SSFSample_EVENT     SSFSample_Metric = 5
	SSFSample_TRACE     SSFSample_Metric = 6
)

var SSFSample_Metric_name = map[int32]string{
	0: "COUNTER",
	1: "GAUGE",
	2: "HISTOGRAM",
	3: "SET",
	4: "STATUS",
	5: "EVENT",
	6: "TRACE",
}
var SSFSample_Metric_value = map[string]int32{
	"COUNTER":   0,
	"GAUGE":     1,
	"HISTOGRAM": 2,
	"SET":       3,
	"STATUS":    4,
	"EVENT":     5,
	"TRACE":     6,
}

func (x SSFSample_Metric) Enum() *SSFSample_Metric {
	p := new(SSFSample_Metric)
	*p = x
	return p
}
func (x SSFSample_Metric) String() string {
	return proto.EnumName(SSFSample_Metric_name, int32(x))
}
func (x *SSFSample_Metric) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SSFSample_Metric_value, data, "SSFSample_Metric")
	if err != nil {
		return err
	}
	*x = SSFSample_Metric(value)
	return nil
}
func (SSFSample_Metric) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type SSFSample_Status int32

const (
	SSFSample_OK       SSFSample_Status = 0
	SSFSample_WARNING  SSFSample_Status = 1
	SSFSample_CRITICAL SSFSample_Status = 2
	SSFSample_UNKNOWN  SSFSample_Status = 3
)

var SSFSample_Status_name = map[int32]string{
	0: "OK",
	1: "WARNING",
	2: "CRITICAL",
	3: "UNKNOWN",
}
var SSFSample_Status_value = map[string]int32{
	"OK":       0,
	"WARNING":  1,
	"CRITICAL": 2,
	"UNKNOWN":  3,
}

func (x SSFSample_Status) Enum() *SSFSample_Status {
	p := new(SSFSample_Status)
	*p = x
	return p
}
func (x SSFSample_Status) String() string {
	return proto.EnumName(SSFSample_Status_name, int32(x))
}
func (x *SSFSample_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SSFSample_Status_value, data, "SSFSample_Status")
	if err != nil {
		return err
	}
	*x = SSFSample_Status(value)
	return nil
}
func (SSFSample_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

type SSFTag struct {
	Name             *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SSFTag) Reset()                    { *m = SSFTag{} }
func (m *SSFTag) String() string            { return proto.CompactTextString(m) }
func (*SSFTag) ProtoMessage()               {}
func (*SSFTag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SSFTag) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SSFTag) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type SSFTrace struct {
	TraceId          *int64 `protobuf:"varint,1,req,name=trace_id,json=traceId" json:"trace_id,omitempty"`
	Id               *int64 `protobuf:"varint,2,req,name=id" json:"id,omitempty"`
	ParentId         *int64 `protobuf:"varint,3,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SSFTrace) Reset()                    { *m = SSFTrace{} }
func (m *SSFTrace) String() string            { return proto.CompactTextString(m) }
func (*SSFTrace) ProtoMessage()               {}
func (*SSFTrace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SSFTrace) GetTraceId() int64 {
	if m != nil && m.TraceId != nil {
		return *m.TraceId
	}
	return 0
}

func (m *SSFTrace) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SSFTrace) GetParentId() int64 {
	if m != nil && m.ParentId != nil {
		return *m.ParentId
	}
	return 0
}

type SSFSample struct {
	Metric           *SSFSample_Metric `protobuf:"varint,1,opt,name=metric,enum=ssf.SSFSample_Metric,def=0" json:"metric,omitempty"`
	Name             *string           `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Timestamp        *int64            `protobuf:"varint,3,req,name=timestamp" json:"timestamp,omitempty"`
	Message          *string           `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	Status           *SSFSample_Status `protobuf:"varint,5,opt,name=status,enum=ssf.SSFSample_Status,def=0" json:"status,omitempty"`
	Value            *float64          `protobuf:"fixed64,6,opt,name=value" json:"value,omitempty"`
	SampleRate       *float32          `protobuf:"fixed32,7,opt,name=sample_rate,json=sampleRate,def=1" json:"sample_rate,omitempty"`
	Tags             []*SSFTag         `protobuf:"bytes,8,rep,name=tags" json:"tags,omitempty"`
	Unit             *string           `protobuf:"bytes,9,opt,name=unit" json:"unit,omitempty"`
	Trace            *SSFTrace         `protobuf:"bytes,10,opt,name=trace" json:"trace,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *SSFSample) Reset()                    { *m = SSFSample{} }
func (m *SSFSample) String() string            { return proto.CompactTextString(m) }
func (*SSFSample) ProtoMessage()               {}
func (*SSFSample) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

const Default_SSFSample_Metric SSFSample_Metric = SSFSample_COUNTER
const Default_SSFSample_Status SSFSample_Status = SSFSample_OK
const Default_SSFSample_SampleRate float32 = 1

func (m *SSFSample) GetMetric() SSFSample_Metric {
	if m != nil && m.Metric != nil {
		return *m.Metric
	}
	return Default_SSFSample_Metric
}

func (m *SSFSample) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SSFSample) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *SSFSample) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *SSFSample) GetStatus() SSFSample_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Default_SSFSample_Status
}

func (m *SSFSample) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *SSFSample) GetSampleRate() float32 {
	if m != nil && m.SampleRate != nil {
		return *m.SampleRate
	}
	return Default_SSFSample_SampleRate
}

func (m *SSFSample) GetTags() []*SSFTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *SSFSample) GetUnit() string {
	if m != nil && m.Unit != nil {
		return *m.Unit
	}
	return ""
}

func (m *SSFSample) GetTrace() *SSFTrace {
	if m != nil {
		return m.Trace
	}
	return nil
}

func init() {
	proto.RegisterType((*SSFTag)(nil), "ssf.SSFTag")
	proto.RegisterType((*SSFTrace)(nil), "ssf.SSFTrace")
	proto.RegisterType((*SSFSample)(nil), "ssf.SSFSample")
	proto.RegisterEnum("ssf.SSFSample_Metric", SSFSample_Metric_name, SSFSample_Metric_value)
	proto.RegisterEnum("ssf.SSFSample_Status", SSFSample_Status_name, SSFSample_Status_value)
}

func init() { proto.RegisterFile("sample.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x50, 0xd1, 0x6a, 0xdb, 0x30,
	0x14, 0xad, 0xa4, 0xc4, 0x89, 0x6f, 0xda, 0x22, 0x2e, 0x1b, 0x68, 0x6c, 0x30, 0xe3, 0xbd, 0xf8,
	0x29, 0xd0, 0x3c, 0x8c, 0xd1, 0x37, 0x13, 0xdc, 0xcc, 0x64, 0x75, 0x40, 0x52, 0x56, 0xd8, 0x4b,
	0x11, 0x8d, 0x1a, 0x0c, 0x75, 0x1a, 0x2c, 0x65, 0x5f, 0xbd, 0x8f, 0x18, 0x96, 0x93, 0x74, 0x0f,
	0x7b, 0xbb, 0xf7, 0x9c, 0x73, 0xb9, 0xe7, 0x1c, 0xb8, 0x74, 0xa6, 0xd9, 0xbf, 0xd8, 0xe9, 0xbe,
	0x7d, 0xf5, 0xaf, 0xc8, 0x9c, 0x7b, 0x4e, 0x67, 0x10, 0x29, 0x75, 0xa7, 0xcd, 0x16, 0x11, 0x06,
	0x3b, 0xd3, 0x58, 0x41, 0x12, 0x9a, 0xc5, 0x32, 0xcc, 0xf8, 0x0e, 0x86, 0xbf, 0xcd, 0xcb, 0xc1,
	0x0a, 0x9a, 0x90, 0x2c, 0x96, 0xfd, 0x92, 0x4a, 0x18, 0x77, 0x37, 0xad, 0x79, 0xb2, 0xf8, 0x01,
	0xc6, 0xbe, 0x1b, 0x1e, 0xeb, 0x4d, 0xb8, 0x64, 0x72, 0x14, 0xf6, 0x72, 0x83, 0xd7, 0x40, 0xeb,
	0x8d, 0xa0, 0x01, 0xa4, 0xf5, 0x06, 0x3f, 0x42, 0xbc, 0x37, 0xad, 0xdd, 0xf9, 0x4e, 0xcb, 0x12,
	0x92, 0x31, 0x39, 0xee, 0x81, 0x72, 0x93, 0xfe, 0x61, 0x10, 0x2b, 0x75, 0xa7, 0x82, 0x41, 0xfc,
	0x0a, 0x51, 0x63, 0x7d, 0x5b, 0x3f, 0x09, 0x92, 0x90, 0xec, 0x7a, 0xf6, 0x7e, 0xea, 0xdc, 0xf3,
	0xf4, 0xcc, 0x4f, 0xef, 0x03, 0x79, 0x3b, 0x9a, 0xaf, 0xd6, 0x95, 0x2e, 0xa4, 0x3c, 0xaa, 0xcf,
	0x19, 0xe8, 0x3f, 0x19, 0x3e, 0x41, 0xec, 0xeb, 0xc6, 0x3a, 0x6f, 0x9a, 0xbd, 0x60, 0xc1, 0xcd,
	0x1b, 0x80, 0x02, 0x46, 0x8d, 0x75, 0xce, 0x6c, 0xad, 0x18, 0x84, 0x8c, 0xa7, 0x15, 0x6f, 0x20,
	0x72, 0xde, 0xf8, 0x83, 0x13, 0xc3, 0xff, 0x7a, 0x50, 0x81, 0xbc, 0xa5, 0xab, 0xa5, 0x3c, 0x0a,
	0xdf, 0xea, 0x8a, 0x12, 0x92, 0x91, 0x63, 0x5d, 0x98, 0xc2, 0xa4, 0xef, 0xfd, 0xb1, 0x35, 0xde,
	0x8a, 0x51, 0x42, 0x32, 0x7a, 0x4b, 0x6e, 0x24, 0xf4, 0xa8, 0x34, 0xde, 0xe2, 0x67, 0x18, 0x78,
	0xb3, 0x75, 0x62, 0x9c, 0xb0, 0x6c, 0x32, 0x9b, 0x9c, 0x5e, 0x69, 0xb3, 0x95, 0x81, 0xe8, 0x92,
	0x1d, 0x76, 0xb5, 0x17, 0x71, 0x30, 0x19, 0x66, 0xfc, 0x02, 0xc3, 0xd0, 0xb5, 0x80, 0x84, 0x64,
	0x93, 0xd9, 0xd5, 0xf9, 0xaa, 0x03, 0x65, 0xcf, 0xa5, 0xbf, 0x20, 0xea, 0xdb, 0xc2, 0x09, 0x9c,
	0xfa, 0xe2, 0x17, 0x18, 0xc3, 0x70, 0x91, 0xaf, 0x17, 0x05, 0x27, 0x78, 0x05, 0xf1, 0xf7, 0x52,
	0xe9, 0xd5, 0x42, 0xe6, 0xf7, 0x9c, 0xe2, 0x08, 0x98, 0x2a, 0x34, 0x67, 0x08, 0x10, 0x29, 0x9d,
	0xeb, 0xb5, 0xe2, 0x83, 0x4e, 0x5e, 0xfc, 0x2c, 0x2a, 0xcd, 0x87, 0xdd, 0xa8, 0x65, 0x3e, 0x2f,
	0x78, 0x94, 0x7e, 0x83, 0xa8, 0x6f, 0x01, 0x23, 0xa0, 0xab, 0x25, 0xbf, 0xe8, 0x7e, 0x3c, 0xe4,
	0xb2, 0x2a, 0xab, 0x05, 0x27, 0x78, 0x09, 0xe3, 0xb9, 0x2c, 0x75, 0x39, 0xcf, 0x7f, 0x70, 0xda,
	0x51, 0xeb, 0x6a, 0x59, 0xad, 0x1e, 0x2a, 0xce, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x2c, 0xac,
	0x79, 0x2d, 0x8a, 0x02, 0x00, 0x00,
}
