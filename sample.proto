syntax = "proto3";

package ssf;

message SSFTag {
  string name = 1;
  string value = 2;
}

message SSFTrace {
  // the trace_id is the (span) id of the root span
  int64 trace_id = 1;
  // the id for this span
  int64 id = 2;
  // the (span) id of the direct parent,
  // if this span is not a root span
  int64 parent_id = 3;
}

message SSFSample {
  enum Metric {
      COUNTER = 0;
      GAUGE = 1;
      HISTOGRAM = 2;
      SET = 3;
      STATUS = 4;
      EVENT = 5;
      TRACE = 6;
  }
  enum Status {
      OK = 0;
      WARNING = 1;
      CRITICAL = 2;
      UNKNOWN = 3;
  }

  // The underlying type of the metric
  Metric metric = 1;

  string name = 2;
  int64 timestamp = 3;
  string message = 4;
  Status status = 5;
  // At the moment, this Value refers specifically to a Duration
  // TODO change this to a separate field
  int64 value = 6;
  float sample_rate = 7;
  repeated SSFTag tags = 8;
  string unit = 9;
  SSFTrace trace = 10;

  // Traces also have a Resource. Unlike the Name, Resource
  // can include whitespace and can be (for example) the
  // endpoint or the base of a SQL query
  // See https://godoc.org/github.com/DataDog/dd-trace-go/tracer#Span
  string resource = 11;

  // the name of the service
  // e.g. "veneur"
  string service = 12;
}
